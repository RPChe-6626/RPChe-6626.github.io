<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常用 Hexo 指令</title>
    <url>/2023/08/13/%E5%B8%B8%E7%94%A8%20Hexo%20%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<ul>
<li><p>本地运行博客。</p>
<p>命令：<code>hexo s -p localhost</code> 。其中 <code>localhost</code> 是任意的本地端口。</p>
<p>用于将博客在本地端口中部署运行。支持实时预览。</p>
</li>
<li><p>更新博客。</p>
<p>命令：<code>hexo clean</code> 意义不清楚。 <code>hexo g</code> 生成本地文件。<code>hexo d</code> 上传博客。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>操作指南</category>
      </categories>
  </entry>
  <entry>
    <title>通过 SSH 拉取 GitHub 上的代码</title>
    <url>/2023/08/13/%E9%80%9A%E8%BF%87-SSH-%E6%8B%89%E5%8F%96-GitHub-%E4%B8%8A%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>使用 SSH 协议替代 HTTPS 协议以获取更高的稳定性和更快的速度。</p>
<a id="more"></a>
<ul>
<li><p>配置 SSH 。</p>
<p>下载 Git 。打开 git-bash.exe ，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure>
<p>按提示完成操作以生成秘钥对。生成的密钥对一般存放在 <code>C:\Users\username\.ssh</code> 。</p>
</li>
<li><p>将公钥添加到 GitHub 。</p>
<p>进入 GitHub ，登入账号，单击头像，进入 Settings 。紧接着进入 SSH and GPG keys ，单击 New SSH key 。Title 任取，在 Key 处填入配置 SSH 时生成的公钥（ id_rsa.pub ）即可。然后单击 Add SSH key 以添加公钥。</p>
</li>
<li><p>使用 SSH 替换 HTTPS 。</p>
<p>进入 GitHub 中博客的存储库，单击 Code ，在 Clone 栏中选择 SSH ，复制其中的内容。打开博客的配置文件（ config.yml ），找到 <code>deploy</code> 下的 <code>repository</code> ，将其替换为你所复制的内容，保存配置。</p>
</li>
<li><p>再次对博客的本地文件执行上传操作，可以发现，发送方式已从 HTTPS 变更为 SSH ，同时稳定性和速度均有显著提升。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>操作指南</category>
      </categories>
  </entry>
  <entry>
    <title>维护日志</title>
    <url>/2023/08/13/%E7%BB%B4%E6%8A%A4%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>步入大学的学习以后，我日益感到去维护一个这样的博客是极有必要的。自退役以后，我便不再使用洛谷博客，或是类似的 OI 博客。而无论是 CSDN 博客还是博客园，它们都难以符合我的要求。因此，我索性重启了以前搭建过的一个采用 hexo 加 GitHub 方式的项目，却带来了更多的技术难处。为了应对并记录可能出现的问题，我便撰写了这个维护日志。</p>
<a id="more"></a>
<h1 id="2023-8-13"><a href="#2023-8-13" class="headerlink" title="2023.8.13"></a>2023.8.13</h1><ul>
<li>重启此博客。</li>
<li>将从 GitHub 上拉取代码的方式从 HTTPS 换成 SSH ，以确保稳定性。</li>
<li>删除遗留的大部分无价值文章，并启动维护日志与操作指南。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>zxy&#39;s law</title>
    <url>/2020/01/23/zxy%E2%80%98s-law/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2019-12-■■，在某资本主义屑校的第二次<del>期末模拟考</del>扫荡结束后，与笔者同监狱的狱友zxy在狱中研究<del>做选择题</del>反扫荡的<del>玄学</del>方式。终于，在当天稍晚他怀着满腔的激动<del>与革命热血</del>找到了我们，宣布他发现了这个方法，找到了这个世界的bug——这就是本文的主题，zxy定律。</p>
<p><img src="https://s2.ax1x.com/2020/02/22/3KR7b4.png" alt=""></p>
<a id="more"></a>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>设想你在某一次考试中遇到了一道不会做的选择题，你百思不得其解，你会怎么办呢？你可能会<del>根据自己的经验</del>瞎蒙一个（标准操作），也可能会根据某个玄学方法来得出答案。比如只在B，C两项里面选（我们班主任给出的烂眼秘方），或者统计一下前面的选项，哪个少选哪个（某知名不靠谱人士）。但是现在我们找到了一个新方法，它虽然<del>带有一定的玄学的因素</del>，但它普遍适用于各科的各种选择题，并且正确率基本可以达到90%<del>只要你脸不黑的话</del>。因为它是由zxy偶然发现的，所以我们将其称为zxy’s law（zxy定律）。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>在一道大题中，假设有n个选择题，你已经做出了其中的m道，选A记为1，B记为2，C记为3，D记为4，设第i道的题号为$a_i$（从1号记起），计分为$b_i$，那么我们可以据此得出m个坐标：</p>
<ul>
<li>$(a_1,b_1),(a_2,b_2),……，(a_m,b_m)$</li>
</ul>
<p>根据这m个坐标我们可以得出一个m-1次函数：$l:y=\sum_{i=1}^m{c_i*x^{i-1}}$（设$c_i$为第i项的系数）。</p>
<p>然后我们把你不会的题目的题号作为自变量x往这个函数里面代入，得出相应的y，我们再把y四舍五入对4取模后加一，($y=(\operatorname{round}y \bmod 4+4)\bmod 4+1$)得出的结果如果是1则答案为A，是2则答案为B，是3则答案为C，是4则答案为D。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><p>这有一道题（某资本主义屑校期末练习）：</p>
<p><img src="https://s2.ax1x.com/2020/02/22/3KfAw4.png" alt=""></p>
<p>假设你已经做了第1，2，3，5题（从1记起），那么我们可以得到4个坐标：</p>
<ul>
<li>$(1,1)，(2,2)，(3,3)，(5,3)$</li>
</ul>
<p>我们把这4个坐标代入3次函数的一般形式：  $y=ax^3+bx^2+cx+d$</p>
<p>可以得到这样一个方程组：$\begin{cases}<br>a+b+c+d=1\\<br>8a+4b+2c+d=2\\<br>27a+9b+3c+d=3\\<br>125a+25b+5c+d=3\\<br>\end{cases}$</p>
<p>解它，我们可以得到它的解是：$(a,b,c,d)=(-\dfrac{1}{12},\dfrac{1}{2},\dfrac{1}{12},\dfrac{1}{2})$</p>
<p>据此，我们可以得到一个3次函数：$l:y=-\dfrac{1}{12}x^3+\dfrac{1}{2}x^2+\dfrac{1}{12}x+\dfrac{1}{2}$</p>
<p>它的图像是这样的：</p>
<p><img src="https://s2.ax1x.com/2020/02/22/3KbrHP.png" alt=""></p>
<p>我们再把$x=4$代入这个函数，得$y=\dfrac{7}{2}$。把y四舍五入后得4，连取模都不用，答案也就是D，是正确的。</p>
<h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><p><del>我鸽了</del></p>
<h2 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h2><p><del>实践是检验真理的唯一标准</del></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>但是这个方法也有缺点，比如当选择题太过分散的时候，我们会得到一次函数或无法得到函数，当选择题太过集中的时候，我们又会得到一个十多次函数（当然你也可以取样）。但是如果你要用此方法，还有一个重要前提——你是真的闲。在你花时间解一个一元多次方程组的时候，说不定其他人都可以想出正解了（语文除外），所以还是尽力想正解吧（还是语文除外）。</p>
<p>但我还是不得不说一句：</p>
<h3 id="玄学出奇迹！"><a href="#玄学出奇迹！" class="headerlink" title="玄学出奇迹！"></a>玄学出奇迹！</h3><p><del>（毕竟有人用这种方法做出的题比他自己用心做的对的还多）</del></p>
]]></content>
      <categories>
        <category>灌水区</category>
      </categories>
      <tags>
        <tag>玄学</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟退火学习笔记</title>
    <url>/2020/01/19/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2020-01-14，异常中学OI​冬令营（水）的第一天，先是花式​splay​了一个上午，<del>下午忘了干了啥，</del>后在晚自习颓废过程中想到好像还可以搞一搞%您颓火（模拟退火），于是就有了这篇文章。</p>
<p><img src="https://s2.ax1x.com/2020/02/22/3KXbZR.png" alt=""></p>
<a id="more"></a>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><del>在实际生活中，</del>我们常常会遇到求函数最值的问题，那怎么办呢？我们当然可以选择爬山算法，即每次在当前最优解的附近选择一个解，如果它优于最优解，就接受它，否则不接受它，并调小选择范围，寻找下一个解。在某些情况下，它是适用的，比如下图</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1579625299001&amp;di=b4cff93bc388cc504063f0aadcfb1133&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.xjishu.com%2Fimg%2Fzl%2F2020%2F1%2F7%2F3556419215.gif" alt=""></p>
<p>但这个算法的劣势非常明显——它会被局限在一个局部最优解上，无法取得全局最优解，比如下图这个函数。</p>
<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2994024717,1924808617&amp;fm=26&amp;gp=0.jpg" alt=""></p>
<p>这时，我们就可以使用一个玄学算法——模拟退火。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>模拟退火算法（Simulate Anneal，SA）是一种通用概率演算法，用来在一个大的搜寻空间内找寻命题的最优解。模拟退火是由S.Kirkpatrick, C.D.Gelatt和M.P.Vecchi在1983年所发明的。V.Čern&yacute;在1985年也独立发明此演算法。模拟退火算法是解决<a href="https://baike.baidu.com/item/TSP/2905216" target="_blank" rel="noopener">TSP问题</a>的有效方法之一。</p>
<p>模拟退火的出发点是基于物理中固体物质的退火过程与一般<a href="https://baike.baidu.com/item/组合优化/3314860" target="_blank" rel="noopener">组合优化问题</a>之间的相似性。模拟退火算法是一种通用的优化算法，其物理退火过程由加温过程、等温过程、冷却过程这三部分组成。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>模拟退火的原理也和金属<a href="https://baike.baidu.com/item/退火/1039313" target="_blank" rel="noopener">退火</a>的原理近似：将热力学的理论套用到统计学上，将搜寻空间内每一点想像成空气内的分子；分子的能量，就是它本身的动能；而搜寻空间内的每一点，也像空气分子一样带有“能量”，以表示该点对命题的合适程度。演算法先以搜寻空间内一个任意点作起始：每一步先选择一个“邻居”，然后再计算从现有位置到达“邻居”的概率。</p>
</blockquote>
<p>——摘自百度百科<del>（当然你也可以不看）</del></p>
<p>简单的说，模拟退火就是在一种一定范围内求多峰函数最值的算法。它在模拟温度降低的同时得出新解，温度越高，解的变化量越大，随着温度的逐渐降低，解的变化量也渐渐变小，并越发集中在最优解附近。最后温度达到了我们设置的最低温，对应到物理学上也就是结晶了，这时，我们可以认为当前我们取得的解就是最优解，<del>当然也可能不是，</del>整个算法也就终止了。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>我们先引入几个参数：当前最优解$E_0$，新解$E$，解变动量$ΔE$（<strong>$E$与$E_0$的差</strong>），上一个被接受的解$E_1$，初温$T_0$，末温$T_k$，当前温度$T$，温度变动量$Δ$，再引用一张非常经典的图——</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/d5/Hill_Climbing_with_Simulated_Annealing.gif" alt=""></p>
<p>这张图非常好的展现了模拟退火的运行过程，从$T_0$开始，每次乘上$Δ$得到$T$，如果$T$小于$T_k$则终止降温。$T_0$我一般设置在$1000$~$5000$左右，$Δ$则是一个略小于1的常数，而$T_k$一般设置在$1^{-8}$到$1^{-15}$之间。</p>
<p>在降温的同时，我们在$E_1$（不是最优解$E_0$）的基础上扰动产生新解$E$，需要注意的是扰动大小随温度的降低而变小，因为在温度高的时候，解的变化量非常大，这时的任务是在全局范围中找到最优解的大致位置，随着温度的降低，解渐渐稳定，这时的任务是确定最优解的准确位置。</p>
<p>但每次得出新解以后，我们以什么原则，或者说什么概率来接受它呢？</p>
<p>这时就要用到<a href="https://baike.baidu.com/item/Metropolis接受准则/14678977?fr=aladdin" target="_blank" rel="noopener">Metropolis准则</a>。简单说来，假设我们的目标是求最小值，如果$E$与$E_0$的差，也就是$ΔE$小于$0$，我们就接受当前解，因为它优于之前的最优解嘛。而如果$ΔE$大于$0$，也就是我们遇到了一个更劣的解，我们也要以一定的概率来接受它，因为我们要找的一个多峰函数的全局最小值，因此就不能局限于一个局部的凹函数。而这个概率是$\exp (-ΔE/T)$。</p>
<p>我个人对于这个概率的理解是这样的：对于$ΔE$，如果它较大，即我们遇到了一个劣得多的解，那我们接受它的概率就相对较小，因为$-ΔE$较小嘛；而如果$ΔE$较小，即我们遇到了一个较劣的解，我们接受它的概率就较大，因为$-ΔE$较大。对于$T$，随着时间的增加，$T$变得越来越小，因此我们把$-ΔE$除以$T$，这样接受的概率就随着温度的降低而越来越小，因为$-ΔE$是一个负数嘛。而对于整个式子，当$T$较大的时候，我们会接受大部分的解，当$T$较小的时候，我们就只会接受$ΔE$较小的解。<del>关于Metropolis准则的具体证明，过于玄学，这里就不给出了。</del>当然你也可以自己试一下。如果选择接受$E$，则把$E_1$设置为$E$，然后降温并寻找下一个解。</p>
<p>这里再引用一张<del>很糊的</del>图：</p>
<p><img src="https://s2.ax1x.com/2020/03/03/348Hu6.png" alt=""></p>
<p>到这里我们也就知道，模拟退火算法的速度和结果受参数（$T_0$，$T_k$，$Δ$还有随机数种子）的影响非常大，是一个玄学的算法，时间复杂度也是$O (玄学)$。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>接下来我们结合一道例题来讲一讲模拟退火的c++​代码实现。<a href="https://www.luogu.com.cn/problemnew/show/UVA10228" target="_blank" rel="noopener"><strong>UVA10228</strong> A Star not a Tree?</a> （这道题其实洛谷上也有）</p>
<p>英文题面尽管跳过，大意是给定$n$个点，求其<a href="https://baike.baidu.com/item/托里拆利点/22667515?fromtitle=费马点&amp;fromid=3333221&amp;fr=aladdin" target="_blank" rel="noopener">费马点</a>（到这$n$个点的距离最小的点）到所有点的距离和。此题各部分的代码实现都很方便，其实就是一道模板题，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(R int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> delta 0.996</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;ch=getchar();&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">double</span> x,y;</span><br><span class="line">&#125;poi[maxn];</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">double</span> ansx,ansy,ax,ay,ans,t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ax=<span class="number">0</span>,ay=<span class="number">0</span>;</span><br><span class="line">	ans=<span class="number">1e8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">	rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">		<span class="keyword">double</span> dx=x-poi[i].x,dy=y-poi[i].y;</span><br><span class="line">		res+=<span class="built_in">sqrt</span>(dx*dx+dy*dy);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">simulate_anneal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> x=ansx,y=ansy;</span><br><span class="line">	t=<span class="number">3000</span>;</span><br><span class="line">	<span class="keyword">while</span>(t&gt;<span class="number">1e-15</span>) &#123;</span><br><span class="line">		<span class="keyword">double</span> X=x+((rand()&lt;&lt;<span class="number">1</span>)-RAND_MAX)*t;</span><br><span class="line">		<span class="keyword">double</span> Y=y+((rand()&lt;&lt;<span class="number">1</span>)-RAND_MAX)*t;</span><br><span class="line">		<span class="keyword">double</span> now=calculate(X,Y);</span><br><span class="line">		<span class="keyword">double</span> Delta=now-ans;</span><br><span class="line">		<span class="keyword">if</span>(Delta&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			ansx=X,ansy=Y;</span><br><span class="line">			x=X,y=Y;</span><br><span class="line">			ans=now;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-Delta/t)*RAND_MAX&gt;rand()) x=X,y=Y;</span><br><span class="line">		t*=delta;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ansx=ax/n,ansy=ay/n;</span><br><span class="line">	simulate_anneal();</span><br><span class="line">	simulate_anneal();</span><br><span class="line">	simulate_anneal();</span><br><span class="line">	simulate_anneal();</span><br><span class="line">	simulate_anneal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	srand(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">	T=read();</span><br><span class="line">	rep(i,<span class="number">1</span>,T) &#123;</span><br><span class="line">		n=read();</span><br><span class="line">		clear();</span><br><span class="line">		rep(j,<span class="number">1</span>,n) &#123;</span><br><span class="line">			poi[j].x=read(),poi[j].y=read();</span><br><span class="line">			ax+=poi[j].x,ay+=poi[j].y;</span><br><span class="line">		&#125;</span><br><span class="line">		work();</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;round(ans)&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		<span class="keyword">if</span>(i!=T) <span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有几个注意点：坐标位置，温度和解变动量必须开成double​，一是为了确保精度，二是为了防止爆int。<del>还要注意输出换行，实在很坑。</del></p>
<p>但是当你愉快的写玩此题并提交以后，可能会发现你并没有AC此题。记得之前说过的吗，我们得出不一定是最优解。这时候就涉及到一个麻烦的步骤——调参。通常有以下几种调参的方式：</p>
<ol>
<li>调大初温$T_0$。</li>
<li>调小末温$T_k$。</li>
<li>调大温度变动量$Δ$。</li>
<li>选取一个新的随机数种子。</li>
<li>多跑几遍模拟退火。</li>
<li><del>开O2</del></li>
</ol>
<p>其中第一，二点对于运行时间的影响不大。而第三点则非常关键，一个微调都会使运行时间和结果发生巨大变化。第五点也是一个有用的方式，一般我们跑三到五遍模拟退火，如果时间充裕，你也可以适当多跑<del>一两百</del>几遍。而第四点就非常看脸了，你当然可以选择某个<del>恶臭的八位质数</del>，但就我个人而言，最有用的还是这句随机数种子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">srand(time(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p>学完一个新算法以后，当然应该练习啦。其实模拟退火的主过程基本就是模板了，唯一的麻烦点是对calculate()函数和接受概率的修改，比如下题：<a href="https://www.luogu.com.cn/problemnew/show/P5544" target="_blank" rel="noopener">[JSOI2016]炸弹攻击1</a></p>
<p>此题的calculate()函数倒是很简单，麻烦的是修改接受概率。</p>
<p>题目要求的是最大值，那么$-ΔE$就成了一个正数，怎么修改呢？其实此时我们只需把这句话：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-Delta/t)*RAND_MAX&gt;rand()) x=X,y=Y;</span><br></pre></td></tr></table></figure>
<p>中的$&gt;$号改为$&lt;$号就可以了，如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-Delta/t)*RAND_MAX&lt;rand()) x=X,y=Y;</span><br></pre></td></tr></table></figure>
<p>而这样就很玄学了。之前我说错了，因为$-ΔE$成了一个正数，所以$\exp (-Delta/t)$必定是大于1的，也就是没有接受劣解的概率。而此题$ΔE$波动小，搜寻范围大，所以我们这样写就可以手动避免算法陷入劣解不能自拔。<del>但这样写的原因是我过了此题以后才想出来的。</del></p>
<p>代码就略过了，实在很简单。</p>
<hr>
<p>模拟退火的应用不仅仅是求点坐标，还可以拿来求序列。其实过程也很简单，每次随机交换序列中的两个元素就可以了，而对于网格，看作是二维序列即可。下面有一道求序列的题目：<a href="https://www.luogu.com.cn/problemnew/show/P2538" target="_blank" rel="noopener">[SCOI2008]城堡</a></p>
<p>读完题以后，你可能不知道此题和序列有何关系。但我们其实可以这样考虑：把所有没有城堡的城市抽象成一个序列，而序列的前$k$个城市，就是要修建城堡的城市。</p>
<p>而关于calculate()函数，我们可以先用floyd​算法预处理出每个城市之间的距离，在这个函数中我们只需$n^2$扫描一次，求出所有城市中离最近城堡的距离的最大值就可以了。代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(register int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> delta 0.996</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;ch=getchar();&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) write(x/<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> a,b,next,v;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt,n,m,k,v[maxn],cas[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn],p[maxn],N,X[maxn],ans=<span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">double</span> t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> x[])</span> </span>&#123;</span><br><span class="line">	rep(i,<span class="number">1</span>,k) cas[x[i]]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> res=-inf;</span><br><span class="line">	rep(i,<span class="number">0</span>,n) &#123;</span><br><span class="line">		<span class="keyword">int</span> minn=inf;</span><br><span class="line">		rep(j,<span class="number">0</span>,n) <span class="keyword">if</span>(cas[j]) minn=min(minn,dis[i][j]);</span><br><span class="line">		res=max(res,minn);</span><br><span class="line">	&#125;</span><br><span class="line">	rep(i,<span class="number">1</span>,k) cas[x[i]]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">simulate_anneal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[maxn];</span><br><span class="line">	rep(i,<span class="number">1</span>,N) a[i]=p[i];</span><br><span class="line">	t=<span class="number">5000</span>;</span><br><span class="line">	<span class="keyword">while</span>(t&gt;<span class="number">1e-15</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> b[maxn];</span><br><span class="line">		rep(i,<span class="number">1</span>,N) b[i]=a[i];</span><br><span class="line">		<span class="keyword">int</span> x=rand()%N+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> y=rand()%N+<span class="number">1</span>;</span><br><span class="line">		swap(b[x],b[y]);</span><br><span class="line">		<span class="keyword">int</span> now=calculate(b);</span><br><span class="line">		<span class="keyword">double</span> Delta=now-ans;</span><br><span class="line">		<span class="keyword">if</span>(Delta&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			ans=now;</span><br><span class="line">			rep(i,<span class="number">1</span>,N) p[i]=a[i]=b[i];</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-Delta/t)*RAND_MAX&gt;rand()) &#123;</span><br><span class="line">			rep(i,<span class="number">1</span>,N) a[i]=b[i];</span><br><span class="line">		&#125;</span><br><span class="line">		t*=delta;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	simulate_anneal();</span><br><span class="line">	simulate_anneal();</span><br><span class="line">	simulate_anneal();</span><br><span class="line">	simulate_anneal();</span><br><span class="line">	simulate_anneal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	srand(time(<span class="number">0</span>));</span><br><span class="line">	n=read(),m=read(),k=read();</span><br><span class="line">	n--;</span><br><span class="line">	rep(i,<span class="number">0</span>,n) X[i]=read();</span><br><span class="line">	rep(i,<span class="number">0</span>,n) v[i]=read();</span><br><span class="line">	rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">		<span class="keyword">int</span> a=read();</span><br><span class="line">		cas[a]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	rep(i,<span class="number">0</span>,n) <span class="keyword">if</span>(!cas[i]) p[++N]=i;</span><br><span class="line">	rep(i,<span class="number">0</span>,n) rep(j,<span class="number">0</span>,n) dis[i][j]=inf;</span><br><span class="line">	rep(i,<span class="number">0</span>,n) dis[i][X[i]]=dis[X[i]][i]=min(v[i],dis[i][X[i]]),dis[i][i]=<span class="number">0</span>;</span><br><span class="line">	rep(c,<span class="number">0</span>,n) rep(i,<span class="number">0</span>,n) rep(j,<span class="number">0</span>,n)</span><br><span class="line">	dis[i][j]=min(dis[i][j],dis[i][c]+dis[c][j]);</span><br><span class="line">	work();</span><br><span class="line">	write(ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>要做好调参的心理准备，我在三天之内调参交了<del>七页</del>。</p>
<p>推荐几题：</p>
<ol>
<li><a href="https://www.luogu.com.cn/problemnew/show/P4035" target="_blank" rel="noopener">[JSOI2008]球形空间产生器</a></li>
<li><a href="https://www.luogu.com.cn/problemnew/show/P4360" target="_blank" rel="noopener">[CEOI2004]锯木厂选址</a></li>
<li><a href="https://www.luogu.com.cn/problemnew/show/P3936" target="_blank" rel="noopener">Coloring</a></li>
</ol>
<p><del>其他的习题自己找去吧。</del></p>
<p>update 2020.3.3 加入了$\LaTeX$数学公式渲染，并添加了一张图。</p>
<p>update 2020.5.1 修锅，感谢@M_sea 纠错。</p>
]]></content>
      <categories>
        <category>学术</category>
      </categories>
      <tags>
        <tag>算法研究</tag>
      </tags>
  </entry>
</search>

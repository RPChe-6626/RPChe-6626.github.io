<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RPChe-6626&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/086eee41c000f36a571b2465dfa38e8e</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rpche-6626.github.io/"/>
  <updated>2020-03-04T16:00:00.000Z</updated>
  <id>https://rpche-6626.github.io/</id>
  
  <author>
    <name>RPChe-6626</name>
    <email>3420302325@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>洛谷P4555 【国家集训队】最长双回文串</title>
    <link href="https://rpche-6626.github.io/2020/03/05/%E6%B4%9B%E8%B0%B7P4555%E3%80%90%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F%E3%80%91%E6%9C%80%E9%95%BF%E5%8F%8C%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>https://rpche-6626.github.io/2020/03/05/%E6%B4%9B%E8%B0%B7P4555%E3%80%90%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F%E3%80%91%E6%9C%80%E9%95%BF%E5%8F%8C%E5%9B%9E%E6%96%87%E4%B8%B2/</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2020-03-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我来拯救我可怜的贡献分顺便贡献一个<del>垃圾</del>$O(n+n\log n)$算法了。</p><hr><p>首先发现此题跟回文串有关，那么我们就可以很容易的联想到manacher算法。如果不会这个算法可以先康康这道题——<a href="https://www.luogu.com.cn/problemnew/show/P3805" target="_blank" rel="noopener"><strong>P3805</strong> 【模板】manacher算法</a>。</p><p>于是我们跑一遍manacher算法，得到了以每个点为对称轴的回文串的最大半径，即下文的$lr$数组。然后我们再读一读题，题目要求的是最长的双回文串，也就是找到两个不同的回文串，使得它们相交，内含或相切，且这两个回文串的对称轴的距离尽量的长。</p><p>那怎么找到这两个回文串呢？</p><p>我们可以这样考虑：枚举每个回文串，寻找左端点在这个回文串的范围内，且对称轴距尽量靠右，也就是距当前回文串对称轴尽量远的回文串。这样我们就考虑了相交和内含的情况。因为‘#’的存在，这样还解决了相切的情况。</p><p>于是这个问题就被转化为了一个RMQ问题。有很多算法可供选择，这里就窝就用线段树了，因为本人写的比较熟。</p><p>这样就可以达到如下的代码——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(register int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans,rl[maxn],maxright,pos,len,maxx[maxn],rl1[maxn],v[maxn];</span><br><span class="line"><span class="built_in">string</span> res=<span class="string">"@#"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">len=s.size()<span class="number">-1</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,len) &#123;</span><br><span class="line">res+=s[i];</span><br><span class="line">res+=<span class="string">"#"</span>;</span><br><span class="line">&#125;</span><br><span class="line">len=res.size()<span class="number">-1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,len) &#123;</span><br><span class="line">rl[i]= maxright &gt; i ? min(rl[pos*<span class="number">2</span>-i],maxright-i) : <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">while</span>(res[i-rl[i]]==res[i+rl[i]]) rl[i]++;</span><br><span class="line"><span class="keyword">if</span>(i+rl[i]&gt;maxright) maxright=i+rl[i],pos=i;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,len) <span class="keyword">if</span>(res[i]!=<span class="string">'#'</span>||rl[i]!=<span class="number">1</span>) v[i-rl[i]+<span class="number">1</span>]=max(v[i-rl[i]+<span class="number">1</span>],i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">maxx[k]=v[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(k*<span class="number">2</span>,l,mid);</span><br><span class="line">build(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">maxx[k]=max(maxx[k*<span class="number">2</span>],maxx[k*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> maxx[k];</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) res=max(res,query(k*<span class="number">2</span>,l,mid,x,y));</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) res=max(res,query(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">manacher(s);</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,len);</span><br><span class="line">rep(i,<span class="number">1</span>,len) &#123;</span><br><span class="line"><span class="keyword">if</span>(res[i]==<span class="string">'#'</span>&amp;&amp;rl[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">ans=max(ans,query(<span class="number">1</span>,<span class="number">1</span>,len,i-rl[i],i+rl[i])-i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">work(s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我来拯救我可怜的贡献分顺便贡献一个&lt;del&gt;垃圾&lt;/del&gt;$O(n+n\log n)$算法了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先发现此题跟回文串有关，那么我们就可以很容易的联想到manacher算法。如果不会这个算法可以先康康这道题——&lt;a href=&quot;https://www
      
    
    </summary>
    
    
      <category term="学术" scheme="https://RPChe-6626.github.io/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="题解" scheme="https://RPChe-6626.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P4970 【全村最好的嘤嘤刀】</title>
    <link href="https://rpche-6626.github.io/2020/02/02/%E6%B4%9B%E8%B0%B7P4970-%E3%80%90%E5%85%A8%E6%9D%91%E6%9C%80%E5%A5%BD%E7%9A%84%E5%98%A4%E5%98%A4%E5%88%80%E3%80%91/"/>
    <id>https://rpche-6626.github.io/2020/02/02/%E6%B4%9B%E8%B0%B7P4970-%E3%80%90%E5%85%A8%E6%9D%91%E6%9C%80%E5%A5%BD%E7%9A%84%E5%98%A4%E5%98%A4%E5%88%80%E3%80%91/</id>
    <published>2020-02-01T16:00:00.000Z</published>
    <updated>2020-02-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>某在新年扩充中沉船的舰长终于成功AC了此题。</del></p><p><img src="https://s2.ax1x.com/2020/02/22/3KL5kV.png" alt=""></p><a id="more"></a><hr><p>首先一看题目，跟嘤嘤嘤和飞鱼丸有关，那必须做。</p><p><img src="https://s2.ax1x.com/2020/02/22/3MeLGD.jpg" alt="嘤嘤刀"></p><p>再读一读题，好像是一道很水的线段树，我们只需同时维护两个元素：区间最大值和其具体位置，再引入一个优先级即可。维护这两个元素很简单，这里不再赘述，而关于优先级，我们只需把绯狱丸所在的位置加上一个极大值，并打上标记，这样就可以保证先取到绯狱丸。每次取到区间最大值的时候，我们再检查一下它带不带标记，如果带则减去这个最大值再累加输出，否则直接累加输出就可以了。</p><p>需要注意的是题目给的计算顺序（从右开始），和数据类型必须声明成int，然后我们就可以得到这样一份代码——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(register int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],maxx[maxn],ans,tag[maxn],pos[maxn],vis[maxn];</span><br><span class="line"><span class="keyword">int</span> res,position;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[k]==-inf) tag[k]=v;</span><br><span class="line"><span class="keyword">else</span> tag[k]+=v;</span><br><span class="line">maxx[k]+=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[k]==-inf) <span class="keyword">return</span>;</span><br><span class="line">ADD(k*<span class="number">2</span>,tag[k]);</span><br><span class="line">ADD(k*<span class="number">2</span>+<span class="number">1</span>,tag[k]);</span><br><span class="line">tag[k]=-inf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">tag[k]=-inf;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">maxx[k]=a[l];</span><br><span class="line">pos[k]=l;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(k*<span class="number">2</span>,l,mid);</span><br><span class="line">build(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">if</span>(maxx[k*<span class="number">2</span>]&lt;=maxx[k*<span class="number">2</span>+<span class="number">1</span>]) &#123;</span><br><span class="line">maxx[k]=maxx[k*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">pos[k]=pos[k*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxx[k]=maxx[k*<span class="number">2</span>];</span><br><span class="line">pos[k]=pos[k*<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) &#123;</span><br><span class="line">ADD(k,v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(k,l,r,mid);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) add(k*<span class="number">2</span>,l,mid,x,y,v);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) add(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line"><span class="keyword">if</span>(maxx[k*<span class="number">2</span>]&lt;=maxx[k*<span class="number">2</span>+<span class="number">1</span>]) &#123;</span><br><span class="line">maxx[k]=maxx[k*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">pos[k]=pos[k*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxx[k]=maxx[k*<span class="number">2</span>];</span><br><span class="line">pos[k]=pos[k*<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) &#123;</span><br><span class="line"><span class="keyword">if</span>(res&lt;maxx[k]) &#123;</span><br><span class="line">res=maxx[k];</span><br><span class="line">position=pos[k];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(res==maxx[k]&amp;&amp;position&lt;pos[k]) position=pos[k]; </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(k,l,r,mid);<span class="comment">//注意基础操作（窝因此句忘打而调试1小时）</span></span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) query(k*<span class="number">2</span>,l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) query(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n) a[i]=read();</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> t=read();</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x=read(),v=read();</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line">position=<span class="number">0</span>;</span><br><span class="line">query(<span class="number">1</span>,<span class="number">1</span>,n,x,x);</span><br><span class="line"><span class="keyword">if</span>(!vis[x])</span><br><span class="line">add(<span class="number">1</span>,<span class="number">1</span>,n,x,x,<span class="number">-2</span>*res+v+inf);</span><br><span class="line"><span class="keyword">else</span> add(<span class="number">1</span>,<span class="number">1</span>,n,x,x,<span class="number">-2</span>*(res-inf)+v+inf);</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l=read(),r=read();</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line">position=<span class="number">0</span>;</span><br><span class="line">query(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line"><span class="keyword">if</span>(vis[position]) &#123;</span><br><span class="line">ans+=res-inf;</span><br><span class="line">write(res-inf),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">add(<span class="number">1</span>,<span class="number">1</span>,n,position,position,-res);</span><br><span class="line">vis[position]=<span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans+=res,write(res),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">add(<span class="number">1</span>,<span class="number">1</span>,n,position,position,-res);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> l=read(),r=read(),v=read();</span><br><span class="line">add(<span class="number">1</span>,<span class="number">1</span>,n,l,r,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans&lt;<span class="number">1e4</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"QAQ"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans&lt;=<span class="number">1e7</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Sakura"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"ice"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用时800ms，效率是很高的。（构思5分钟，写作20分钟，调试1小时）</p><p>但是我们可以更细心的读一读题，可以发现此题的数据范围是非常友好的（嘤嘤嘤太善良了），因此我们可以考虑暴力，这样就可以得到如下的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(register int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],vis[maxn],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n) a[i]=read();</span><br><span class="line">rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> t=read();</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x=read(),v=read();</span><br><span class="line">a[x]=v-a[x];</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l=read(),r=read(),res=-inf,pos;</span><br><span class="line">rep(i,l,r) &#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]) &#123;</span><br><span class="line"><span class="keyword">if</span>(res&lt;=a[i]) &#123;</span><br><span class="line">res=a[i];</span><br><span class="line">pos=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res!=-inf) &#123;</span><br><span class="line">write(res),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">vis[pos]=<span class="number">0</span>;</span><br><span class="line">a[pos]=<span class="number">0</span>;</span><br><span class="line">ans+=res;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,l,r) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line"><span class="keyword">if</span>(res&lt;=a[i]) &#123;</span><br><span class="line">res=a[i];</span><br><span class="line">pos=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">write(res),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">a[pos]=<span class="number">0</span>;</span><br><span class="line">ans+=res;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l=read(),r=read(),x=read();</span><br><span class="line">rep(i,l,r) &#123;</span><br><span class="line">a[i]+=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans&lt;<span class="number">1e4</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"QAQ"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans&lt;<span class="number">1e7</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Sakura"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"ice"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用时2.3s。<del>（好像也不错）</del>关于甚么倒序的问题，完全没有影响到啊。<del>（可能是因为卡常卡得好）</del>但是比起线段树，它们之间的差距还是很大的，数据一大暴力就当场暴毙，所以顺便请求加强数据。</p><hr><p><del>许愿冰刀、皮里上和女王</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;某在新年扩充中沉船的舰长终于成功AC了此题。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KL5kV.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学术" scheme="https://RPChe-6626.github.io/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="题解" scheme="https://RPChe-6626.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>zxy&#39;s law</title>
    <link href="https://rpche-6626.github.io/2020/01/23/zxy%E2%80%98s-law/"/>
    <id>https://rpche-6626.github.io/2020/01/23/zxy%E2%80%98s-law/</id>
    <published>2020-01-22T16:00:00.000Z</published>
    <updated>2020-01-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2019-12-■■，在某资本主义屑校的第二次<del>期末模拟考</del>扫荡结束后，与笔者同监狱的狱友zxy在狱中研究<del>做选择题</del>反扫荡的<del>玄学</del>方式。终于，在当天稍晚他怀着满腔的激动<del>与革命热血</del>找到了我们，宣布他发现了这个方法，找到了这个世界的bug——这就是本文的主题，zxy定律。</p><p><img src="https://s2.ax1x.com/2020/02/22/3KR7b4.png" alt=""></p><a id="more"></a><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>设想你在某一次考试中遇到了一道不会做的选择题，你百思不得其解，你会怎么办呢？你可能会<del>根据自己的经验</del>瞎蒙一个（标准操作），也可能会根据某个玄学方法来得出答案。比如只在B，C两项里面选（我们班主任给出的烂眼秘方），或者统计一下前面的选项，哪个少选哪个（某知名不靠谱人士）。但是现在我们找到了一个新方法，它虽然<del>带有一定的玄学的因素</del>，但它普遍适用于各科的各种选择题，并且正确率基本可以达到90%<del>只要你脸不黑的话</del>。因为它是由zxy偶然发现的，所以我们将其称为zxy’s law（zxy定律）。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>在一道大题中，假设有n个选择题，你已经做出了其中的m道，选A记为1，B记为2，C记为3，D记为4，设第i道的题号为$a_i$（从1号记起），计分为$b_i$，那么我们可以据此得出m个坐标：</p><ul><li>$(a_1,b_1),(a_2,b_2),……，(a_m,b_m)$</li></ul><p>根据这m个坐标我们可以得出一个m-1次函数：$l:y=\sum_{i=1}^m{c_i*x^{i-1}}$（设$c_i$为第i项的系数）。</p><p>然后我们把你不会的题目的题号作为自变量x往这个函数里面代入，得出相应的y，我们再把y四舍五入对4取模后加一，($y=(\operatorname{round}y \bmod 4+4)\bmod 4+1$)得出的结果如果是1则答案为A，是2则答案为B，是3则答案为C，是4则答案为D。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><p>这有一道题（某资本主义屑校期末练习）：</p><p><img src="https://s2.ax1x.com/2020/02/22/3KfAw4.png" alt=""></p><p>假设你已经做了第1，2，3，5题（从1记起），那么我们可以得到4个坐标：</p><ul><li>$(1,1)，(2,2)，(3,3)，(5,3)$</li></ul><p>我们把这4个坐标代入3次函数的一般形式：  $y=ax^3+bx^2+cx+d$</p><p>可以得到这样一个方程组：$\begin{cases}<br>a+b+c+d=1\\<br>8a+4b+2c+d=2\\<br>27a+9b+3c+d=3\\<br>125a+25b+5c+d=3\\<br>\end{cases}$</p><p>解它，我们可以得到它的解是：$(a,b,c,d)=(-\dfrac{1}{12},\dfrac{1}{2},\dfrac{1}{12},\dfrac{1}{2})$</p><p>据此，我们可以得到一个3次函数：$l:y=-\dfrac{1}{12}x^3+\dfrac{1}{2}x^2+\dfrac{1}{12}x+\dfrac{1}{2}$</p><p>它的图像是这样的：</p><p><img src="https://s2.ax1x.com/2020/02/22/3KbrHP.png" alt=""></p><p>我们再把$x=4$代入这个函数，得$y=\dfrac{7}{2}$。把y四舍五入后得4，连取模都不用，答案也就是D，是正确的。</p><h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><p><del>我鸽了</del></p><h2 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h2><p><del>实践是检验真理的唯一标准</del></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>但是这个方法也有缺点，比如当选择题太过分散的时候，我们会得到一次函数或无法得到函数，当选择题太过集中的时候，我们又会得到一个十多次函数（当然你也可以取样）。但是如果你要用此方法，还有一个重要前提——你是真的闲。在你花时间解一个一元多次方程组的时候，说不定其他人都可以想出正解了（语文除外），所以还是尽力想正解吧（还是语文除外）。</p><p>但我还是不得不说一句：</p><h3 id="玄学出奇迹！"><a href="#玄学出奇迹！" class="headerlink" title="玄学出奇迹！"></a>玄学出奇迹！</h3><p><del>（毕竟有人用这种方法做出的题比他自己用心做的对的还多）</del></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;2019-12-■■，在某资本主义屑校的第二次&lt;del&gt;期末模拟考&lt;/del&gt;扫荡结束后，与笔者同监狱的狱友zxy在狱中研究&lt;del&gt;做选择题&lt;/del&gt;反扫荡的&lt;del&gt;玄学&lt;/del&gt;方式。终于，在当天稍晚他怀着满腔的激动&lt;del&gt;与革命热血&lt;/del&gt;找到了我们，宣布他发现了这个方法，找到了这个世界的bug——这就是本文的主题，zxy定律。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KR7b4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="灌水区" scheme="https://RPChe-6626.github.io/categories/%E7%81%8C%E6%B0%B4%E5%8C%BA/"/>
    
    
      <category term="玄学" scheme="https://RPChe-6626.github.io/tags/%E7%8E%84%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>模拟退火学习笔记</title>
    <link href="https://rpche-6626.github.io/2020/01/19/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://rpche-6626.github.io/2020/01/19/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-18T16:00:00.000Z</published>
    <updated>2020-01-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2020-01-14，异常中学OI​冬令营（水）的第一天，先是花式​splay​了一个上午，<del>下午忘了干了啥，</del>后在晚自习颓废过程中想到好像还可以搞一搞%您颓火（模拟退火），于是就有了这篇文章。</p><p><img src="https://s2.ax1x.com/2020/02/22/3KXbZR.png" alt=""></p><a id="more"></a><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><del>在实际生活中，</del>我们常常会遇到求函数最值的问题，那怎么办呢？我们当然可以选择爬山算法，即每次在当前最优解的附近选择一个解，如果它优于最优解，就接受它，否则不接受它，并调小选择范围，寻找下一个解。在某些情况下，它是适用的，比如下图</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1579625299001&amp;di=b4cff93bc388cc504063f0aadcfb1133&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.xjishu.com%2Fimg%2Fzl%2F2020%2F1%2F7%2F3556419215.gif" alt=""></p><p>但这个算法的劣势非常明显——它会被局限在一个局部最优解上，无法取得全局最优解，比如下图这个函数。</p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2994024717,1924808617&amp;fm=26&amp;gp=0.jpg" alt=""></p><p>这时，我们就可以使用一个玄学算法——模拟退火。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>模拟退火算法（Simulate Anneal，SA）是一种通用概率演算法，用来在一个大的搜寻空间内找寻命题的最优解。模拟退火是由S.Kirkpatrick, C.D.Gelatt和M.P.Vecchi在1983年所发明的。V.Čern&yacute;在1985年也独立发明此演算法。模拟退火算法是解决<a href="https://baike.baidu.com/item/TSP/2905216" target="_blank" rel="noopener">TSP问题</a>的有效方法之一。</p><p>模拟退火的出发点是基于物理中固体物质的退火过程与一般<a href="https://baike.baidu.com/item/组合优化/3314860" target="_blank" rel="noopener">组合优化问题</a>之间的相似性。模拟退火算法是一种通用的优化算法，其物理退火过程由加温过程、等温过程、冷却过程这三部分组成。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>模拟退火的原理也和金属<a href="https://baike.baidu.com/item/退火/1039313" target="_blank" rel="noopener">退火</a>的原理近似：将热力学的理论套用到统计学上，将搜寻空间内每一点想像成空气内的分子；分子的能量，就是它本身的动能；而搜寻空间内的每一点，也像空气分子一样带有“能量”，以表示该点对命题的合适程度。演算法先以搜寻空间内一个任意点作起始：每一步先选择一个“邻居”，然后再计算从现有位置到达“邻居”的概率。</p></blockquote><p>——摘自百度百科<del>（当然你也可以不看）</del></p><p>简单的说，模拟退火就是在一种一定范围内求多峰函数最值的算法。它在模拟温度降低的同时得出新解，温度越高，解的变化量越大，随着温度的逐渐降低，解的变化量也渐渐变小，并越发集中在最优解附近。最后温度达到了我们设置的最低温，对应到物理学上也就是结晶了，这时，我们可以认为当前我们取得的解就是最优解，<del>当然也可能不是，</del>整个算法也就终止了。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>我们先引入几个参数：当前最优解$E_0$，新解$E$，解变动量$ΔE$（<strong>$E$与$E_0$的差</strong>），上一个被接受的解$E_1$，初温$T_0$，末温$T_k$，当前温度$T$，温度变动量$Δ$，再引用一张非常经典的图——</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/d/d5/Hill_Climbing_with_Simulated_Annealing.gif" alt=""></p><p>这张图非常好的展现了模拟退火的运行过程，从$T_0$开始，每次乘上$Δ$得到$T$，如果$T$小于$T_k$则终止降温。$T_0$我一般设置在$1000$~$5000$左右，$Δ$则是一个略小于1的常数，而$T_k$一般设置在$1^{-8}$到$1^{-15}$之间。</p><p>在降温的同时，我们在$E_1$（不是最优解$E_0$）的基础上扰动产生新解$E$，需要注意的是扰动大小随温度的降低而变小，因为在温度高的时候，解的变化量非常大，这时的任务是在全局范围中找到最优解的大致位置，随着温度的降低，解渐渐稳定，这时的任务是确定最优解的准确位置。</p><p>但每次得出新解以后，我们以什么原则，或者说什么概率来接受它呢？</p><p>这时就要用到<a href="https://baike.baidu.com/item/Metropolis接受准则/14678977?fr=aladdin" target="_blank" rel="noopener">Metropolis准则</a>。简单说来，假设我们的目标是求最小值，如果$E$与$E_0$的差，也就是$ΔE$小于$0$，我们就接受当前解，因为它优于之前的最优解嘛。而如果$ΔE$大于$0$，也就是我们遇到了一个更劣的解，我们也要以一定的概率来接受它，因为我们要找的一个多峰函数的全局最小值，因此就不能局限于一个局部的凹函数。而这个概率是$\exp (-ΔE/T)$。</p><p>我个人对于这个概率的理解是这样的：对于$ΔE$，如果它较大，即我们遇到了一个劣得多的解，那我们接受它的概率就相对较小，因为$-ΔE$较小嘛；而如果$ΔE$较小，即我们遇到了一个较劣的解，我们接受它的概率就较大，因为$-ΔE$较大。对于$T$，随着时间的增加，$T$变得越来越小，因此我们把$-ΔE$除以$T$，这样接受的概率就随着温度的降低而越来越小，因为$-ΔE$是一个负数嘛。而对于整个式子，当$T$较大的时候，我们会接受大部分的解，当$T$较小的时候，我们就只会接受$ΔE$较小的解。<del>关于Metropolis准则的具体证明，过于玄学，这里就不给出了。</del>当然你也可以自己试一下。如果选择接受$E$，则把$E_1$设置为$E$，然后降温并寻找下一个解。</p><p>这里再引用一张<del>很糊的</del>图：</p><p><img src="https://s2.ax1x.com/2020/03/03/348Hu6.png" alt=""></p><p>到这里我们也就知道，模拟退火算法的速度和结果受参数（$T_0$，$T_k$，$Δ$还有随机数种子）的影响非常大，是一个玄学的算法，时间复杂度也是$O (玄学)$。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>接下来我们结合一道例题来讲一讲模拟退火的c++​代码实现。<a href="https://www.luogu.com.cn/problemnew/show/UVA10228" target="_blank" rel="noopener"><strong>UVA10228</strong> A Star not a Tree?</a> （这道题其实洛谷上也有）</p><p>英文题面尽管跳过，大意是给定$n$个点，求其<a href="https://baike.baidu.com/item/托里拆利点/22667515?fromtitle=费马点&amp;fromid=3333221&amp;fr=aladdin" target="_blank" rel="noopener">费马点</a>（到这$n$个点的距离最小的点）到所有点的距离和。此题各部分的代码实现都很方便，其实就是一道模板题，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(R int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> delta 0.996</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;poi[maxn];</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">double</span> ansx,ansy,ax,ay,ans,t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ax=<span class="number">0</span>,ay=<span class="number">0</span>;</span><br><span class="line">ans=<span class="number">1e8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">double</span> dx=x-poi[i].x,dy=y-poi[i].y;</span><br><span class="line">res+=<span class="built_in">sqrt</span>(dx*dx+dy*dy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">simulate_anneal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x=ansx,y=ansy;</span><br><span class="line">t=<span class="number">3000</span>;</span><br><span class="line"><span class="keyword">while</span>(t&gt;<span class="number">1e-15</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> X=x+((rand()&lt;&lt;<span class="number">1</span>)-RAND_MAX)*t;</span><br><span class="line"><span class="keyword">double</span> Y=y+((rand()&lt;&lt;<span class="number">1</span>)-RAND_MAX)*t;</span><br><span class="line"><span class="keyword">double</span> now=calculate(X,Y);</span><br><span class="line"><span class="keyword">double</span> Delta=now-ans;</span><br><span class="line"><span class="keyword">if</span>(Delta&lt;<span class="number">0</span>) &#123;</span><br><span class="line">ansx=X,ansy=Y;</span><br><span class="line">x=X,y=Y;</span><br><span class="line">ans=now;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-Delta/t)*RAND_MAX&gt;rand()) x=X,y=Y;</span><br><span class="line">t*=delta;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ansx=ax/n,ansy=ay/n;</span><br><span class="line">simulate_anneal();</span><br><span class="line">simulate_anneal();</span><br><span class="line">simulate_anneal();</span><br><span class="line">simulate_anneal();</span><br><span class="line">simulate_anneal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">srand(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">T=read();</span><br><span class="line">rep(i,<span class="number">1</span>,T) &#123;</span><br><span class="line">n=read();</span><br><span class="line">clear();</span><br><span class="line">rep(j,<span class="number">1</span>,n) &#123;</span><br><span class="line">poi[j].x=read(),poi[j].y=read();</span><br><span class="line">ax+=poi[j].x,ay+=poi[j].y;</span><br><span class="line">&#125;</span><br><span class="line">work();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;round(ans)&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">if</span>(i!=T) <span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有几个注意点：坐标位置，温度和解变动量必须开成double​，一是为了确保精度，二是为了防止爆int。<del>还要注意输出换行，实在很坑。</del></p><p>但是当你愉快的写玩此题并提交以后，可能会发现你并没有AC此题。记得之前说过的吗，我们得出不一定是最优解。这时候就涉及到一个麻烦的步骤——调参。通常有以下几种调参的方式：</p><ol><li>调大初温$T_0$。</li><li>调小末温$T_k$。</li><li>调大温度变动量$Δ$。</li><li>选取一个新的随机数种子。</li><li>多跑几遍模拟退火。</li><li><del>开O2</del></li></ol><p>其中第一，二点对于运行时间的影响不大。而第三点则非常关键，一个微调都会使运行时间和结果发生巨大变化。第五点也是一个有用的方式，一般我们跑三到五遍模拟退火，如果时间充裕，你也可以适当多跑<del>一两百</del>几遍。而第四点就非常看脸了，你当然可以选择某个<del>恶臭的八位质数</del>，但就我个人而言，最有用的还是这句随机数种子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srand(time(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p>学完一个新算法以后，当然应该练习啦。其实模拟退火的主过程基本就是模板了，唯一的麻烦点是对calculate()函数和接受概率的修改，比如下题：<a href="https://www.luogu.com.cn/problemnew/show/P5544" target="_blank" rel="noopener">[JSOI2016]炸弹攻击1</a></p><p>此题的calculate()函数倒是很简单，麻烦的是修改接受概率。</p><p>其实关于接受概率，我们只要记住满足两个原则就可以了：</p><ol><li>接受概率随$ΔE$的绝对值的增大而变小。</li><li>接受概率随温度的降低而变小。</li></ol><p>题目要求的是最大值，那么$-ΔE$就成了一个正数，怎么修改呢？其实此时我们只需把这句话：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-Delta/t)*RAND_MAX&gt;rand()) x=X,y=Y;</span><br></pre></td></tr></table></figure><p>中的$&gt;$号改为$&lt;$号就可以了，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-Delta/t)*RAND_MAX&lt;rand()) x=X,y=Y;</span><br></pre></td></tr></table></figure><p>我们可以分析一下。对于$-ΔE$，它越大，我们取的概率越小，这样我们用$&lt;$号就可以了。对于$T$，它越小，我们取的概率也越小，而因为$T$作为除数，所以我们也需要用$&lt;$号。当然你也可以再自己理解一下。</p><p>代码就略过了，实在很简单。</p><hr><p>模拟退火的应用不仅仅是求点坐标，还可以拿来求序列。其实过程也很简单，每次随机交换序列中的两个元素就可以了，而对于网格，看作是二维序列即可。下面有一道求序列的题目：<a href="https://www.luogu.com.cn/problemnew/show/P2538" target="_blank" rel="noopener">[SCOI2008]城堡</a></p><p>读完题以后，你可能不知道此题和序列有何关系。但我们其实可以这样考虑：把所有没有城堡的城市抽象成一个序列，而序列的前$k$个城市，就是要修建城堡的城市。</p><p>而关于calculate()函数，我们可以先用floyd​算法预处理出每个城市之间的距离，在这个函数中我们只需$n^2$扫描一次，求出所有城市中离最近城堡的距离的最大值就可以了。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(register int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> delta 0.996</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,next,v;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt,n,m,k,v[maxn],cas[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn],p[maxn],N,X[maxn],ans=<span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">double</span> t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> x[])</span> </span>&#123;</span><br><span class="line">rep(i,<span class="number">1</span>,k) cas[x[i]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res=-inf;</span><br><span class="line">rep(i,<span class="number">0</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> minn=inf;</span><br><span class="line">rep(j,<span class="number">0</span>,n) <span class="keyword">if</span>(cas[j]) minn=min(minn,dis[i][j]);</span><br><span class="line">res=max(res,minn);</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,k) cas[x[i]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">simulate_anneal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">rep(i,<span class="number">1</span>,N) a[i]=p[i];</span><br><span class="line">t=<span class="number">5000</span>;</span><br><span class="line"><span class="keyword">while</span>(t&gt;<span class="number">1e-15</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line">rep(i,<span class="number">1</span>,N) b[i]=a[i];</span><br><span class="line"><span class="keyword">int</span> x=rand()%N+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y=rand()%N+<span class="number">1</span>;</span><br><span class="line">swap(b[x],b[y]);</span><br><span class="line"><span class="keyword">int</span> now=calculate(b);</span><br><span class="line"><span class="keyword">double</span> Delta=now-ans;</span><br><span class="line"><span class="keyword">if</span>(Delta&lt;<span class="number">0</span>) &#123;</span><br><span class="line">ans=now;</span><br><span class="line">rep(i,<span class="number">1</span>,N) p[i]=a[i]=b[i];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-Delta/t)*RAND_MAX&gt;rand()) &#123;</span><br><span class="line">rep(i,<span class="number">1</span>,N) a[i]=b[i];</span><br><span class="line">&#125;</span><br><span class="line">t*=delta;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">simulate_anneal();</span><br><span class="line">simulate_anneal();</span><br><span class="line">simulate_anneal();</span><br><span class="line">simulate_anneal();</span><br><span class="line">simulate_anneal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line">n=read(),m=read(),k=read();</span><br><span class="line">n--;</span><br><span class="line">rep(i,<span class="number">0</span>,n) X[i]=read();</span><br><span class="line">rep(i,<span class="number">0</span>,n) v[i]=read();</span><br><span class="line">rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> a=read();</span><br><span class="line">cas[a]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">0</span>,n) <span class="keyword">if</span>(!cas[i]) p[++N]=i;</span><br><span class="line">rep(i,<span class="number">0</span>,n) rep(j,<span class="number">0</span>,n) dis[i][j]=inf;</span><br><span class="line">rep(i,<span class="number">0</span>,n) dis[i][X[i]]=dis[X[i]][i]=min(v[i],dis[i][X[i]]),dis[i][i]=<span class="number">0</span>;</span><br><span class="line">rep(c,<span class="number">0</span>,n) rep(i,<span class="number">0</span>,n) rep(j,<span class="number">0</span>,n)</span><br><span class="line">dis[i][j]=min(dis[i][j],dis[i][c]+dis[c][j]);</span><br><span class="line">work();</span><br><span class="line">write(ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>要做好调参的心理准备，我在三天之内调参交了<del>七页</del>。</p><p>推荐几题：</p><ol><li><a href="https://www.luogu.com.cn/problemnew/show/P4035" target="_blank" rel="noopener">[JSOI2008]球形空间产生器</a></li><li><a href="https://www.luogu.com.cn/problemnew/show/P4360" target="_blank" rel="noopener">[CEOI2004]锯木厂选址</a></li><li><a href="https://www.luogu.com.cn/problemnew/show/P3936" target="_blank" rel="noopener">Coloring</a></li></ol><p><del>其他的习题自己找去吧。</del></p><p>update 2020.3.3 加入了$\LaTeX$数学公式渲染，并添加了一张图。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;2020-01-14，异常中学OI​冬令营（水）的第一天，先是花式​splay​了一个上午，&lt;del&gt;下午忘了干了啥，&lt;/del&gt;后在晚自习颓废过程中想到好像还可以搞一搞%您颓火（模拟退火），于是就有了这篇文章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KXbZR.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学术" scheme="https://RPChe-6626.github.io/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="算法研究" scheme="https://RPChe-6626.github.io/tags/%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P2286 【[HNOI2004]宠物收养场】</title>
    <link href="https://rpche-6626.github.io/2019/12/11/%E6%B4%9B%E8%B0%B7P2286-%E3%80%90[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA%E3%80%91/"/>
    <id>https://rpche-6626.github.io/2019/12/11/%E6%B4%9B%E8%B0%B7P2286-%E3%80%90[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA%E3%80%91/</id>
    <published>2019-12-10T16:00:00.000Z</published>
    <updated>2019-12-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>此题思路还是很简单的，考虑到同一时间呆在收养所中的，要么全是宠物，要么全是领养者，因此我们只需要用平衡树来维护一下，求一下前驱和后继就行。这里我们就用treap来实现，因为码量小<del>而且我不会splay</del>。</p><p><img src="https://s2.ax1x.com/2020/02/22/3KL0TP.png" alt=""></p><a id="more"></a><p>但是，我发现其他题解在处理数据时写得都很长，大多都分了4类讨论。但实际上，如果我们使用一个栈来维护，代码会简短不少。</p><p>刚开始声明一个栈，如果栈为空或栈顶元素跟当前元素种类相同，就直接把当前元素入栈并插入平衡树。</p><p>如果栈不为空且栈顶元素跟当前元素种类不相同，就弹出栈顶元素并找当前元素的前驱和后继，累加答案并删除前驱和后继中较优的一个，注意到优先考虑前驱。</p><p>这样我们就可以得到一份<del>用平衡树维护的</del>最短代码。（129行）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> up(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> ls,rs,c,siz,pri,v;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(x) nod[x].ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(x) nod[x].rs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> c(x) nod[x].c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> siz(x) nod[x].siz</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pri(x) nod[x].pri</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(x) nod[x].v</span></span><br><span class="line">&#125;nod[maxn];</span><br><span class="line"><span class="keyword">int</span> n,cnt,rt,x[maxn],y[maxn],cnt1,ans,sig[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;siz(k)=siz(ls(k))+siz(rs(k))+c(k);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ls=ls(k);</span><br><span class="line">ls(k)=rs(ls);</span><br><span class="line">rs(ls)=k;</span><br><span class="line">siz(ls)=siz(k);</span><br><span class="line">update(k);</span><br><span class="line">k=ls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> rs=rs(k);</span><br><span class="line">rs(k)=ls(rs);</span><br><span class="line">ls(rs)=k;</span><br><span class="line">siz(rs)=siz(k);</span><br><span class="line">update(k);</span><br><span class="line">k=rs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) &#123;</span><br><span class="line">k=++cnt;</span><br><span class="line">c(k)++,siz(k)++,v(k)=v,pri(k)=rand();</span><br><span class="line">v(k)=v,ls(k)=rs(k)=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> siz(k)++;</span><br><span class="line"><span class="keyword">if</span>(v(k)==v) c(k)++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(v&lt;v(k)) &#123;</span><br><span class="line">insert(ls(k),v);</span><br><span class="line"><span class="keyword">if</span>(pri(ls(k))&lt;pri(k)) zig(k);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">insert(rs(k),v);</span><br><span class="line"><span class="keyword">if</span>(pri(rs(k))&lt;pri(k)) zag(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delet</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(v(k)==v) &#123;</span><br><span class="line"><span class="keyword">if</span>(c(k)&gt;<span class="number">1</span>) c(k)--,siz(k)--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!ls(k)||!rs(k)) &#123;</span><br><span class="line">k=ls(k)+rs(k);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(pri(ls(k))&lt;pri(rs(k))) zig(k),delet(k,v);</span><br><span class="line"><span class="keyword">else</span> zag(k),delet(k,v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">siz(k)--;</span><br><span class="line"><span class="keyword">if</span>(v&lt;v(k)) delet(ls(k),v);</span><br><span class="line"><span class="keyword">else</span> delet(rs(k),v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=-inf;</span><br><span class="line"><span class="keyword">while</span>(k) &#123;</span><br><span class="line"><span class="keyword">if</span>(v(k)&lt;v) res=v(k),k=rs(k);</span><br><span class="line"><span class="keyword">else</span> k=ls(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nex</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=inf;</span><br><span class="line"><span class="keyword">while</span>(k) &#123;</span><br><span class="line"><span class="keyword">if</span>(v(k)&gt;v) res=v(k),k=ls(k);</span><br><span class="line"><span class="keyword">else</span> k=rs(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line">n=read();</span><br><span class="line">up(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> t=read(),tx=read();</span><br><span class="line"><span class="keyword">if</span>(s.empty()) s.push(t),insert(rt,tx);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s.top()==t) s.push(t),insert(rt,tx);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> a=pre(rt,tx),b=nex(rt,tx);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(tx-a)&lt;=<span class="built_in">abs</span>(b-tx)) &#123;</span><br><span class="line">ans=<span class="built_in">abs</span>(ans+tx-a)%<span class="number">1000000</span>;</span><br><span class="line">delet(rt,a);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans=<span class="built_in">abs</span>(ans+b-tx)%<span class="number">1000000</span>;</span><br><span class="line">delet(rt,b);</span><br><span class="line">&#125;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">write(ans%<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此题思路还是很简单的，考虑到同一时间呆在收养所中的，要么全是宠物，要么全是领养者，因此我们只需要用平衡树来维护一下，求一下前驱和后继就行。这里我们就用treap来实现，因为码量小&lt;del&gt;而且我不会splay&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KL0TP.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学术" scheme="https://RPChe-6626.github.io/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="题解" scheme="https://RPChe-6626.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>声援某社会主义媒体的不懈斗争</title>
    <link href="https://rpche-6626.github.io/2019/11/21/%E5%A3%B0%E6%8F%B4%E6%9F%90%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E5%AA%92%E4%BD%93%E7%9A%84%E4%B8%8D%E6%87%88%E6%96%97%E4%BA%89/"/>
    <id>https://rpche-6626.github.io/2019/11/21/%E5%A3%B0%E6%8F%B4%E6%9F%90%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E5%AA%92%E4%BD%93%E7%9A%84%E4%B8%8D%E6%87%88%E6%96%97%E4%BA%89/</id>
    <published>2019-11-20T16:00:00.000Z</published>
    <updated>2019-11-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本博客第一篇文章<del>竟然是反云力文章</del>。</p><p><del>太好了，我也要没书读了。</del></p><p><img src="https://s2.ax1x.com/2020/02/22/3KjpsH.png" alt=""></p><a id="more"></a><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>   前两天偶然阅读到了某社会主义良心媒体对于一资本主义屑校反动本质的无情揭露，引起了我作为此资本主义屑校一学子 <del>（同监狱一狱友）</del> 的深刻反思——为什么之前我一直被蒙蔽着双眼？</p><p>   这篇文章一经发表就在人民群众（某聚集地）中引起了轩然大波，更引起了仁人志士们的群情激奋，我认为这样的良心文章应该被更多人知道 <del>（仅限本校学生、校友）</del> ，为了泻出我们的一腔义愤，我代表我们（群友）在此声援其不懈斗争！</p><h2 id="揭露"><a href="#揭露" class="headerlink" title="揭露"></a>揭露</h2><ol><li><p>在■■期间，我就对此资本主义屑校上级机构中发生的一件惨案有所耳闻：一学生张贴试卷<del>并高唱国际歌</del>以反抗老师暴政，结果被@#%￥！%&amp;*%。</p><p>我当时听了，并没有什么触动，因为我觉得这种事不会发生在我身上，（因为貌似已经发生过了。）结果就发生了（不是我脸黑）。我的■■被老师暴政，我决定去讨个公道，（顺便高唱国际歌张贴试卷）结果老师仅做了文件纸面上的修改，并没有修改已存储的数据（形式主义），他（她）见我有 <del>高唱国际歌张贴试卷</del> 的意图，还找接口没收了我的试卷，待风头已过才还给了我。</p><p>我能说什么？此次测试我已经爆炸，还被老师暴政，结果更惨不忍睹。</p><p>万恶的形式主义。</p></li><li><p>冗长官吏体系</p></li><li><p>种族歧视</p></li></ol><h2 id="批判"><a href="#批判" class="headerlink" title="批判"></a>批判</h2><ol><li><p>如果有100％的利润,资本主义屑校会挺而走险；</p><p>如果有200％的利润,资本主义屑校会藐视学生的抗议；</p><p>如果有300％的利润,那么资本主义屑校便会践踏学生的分数!</p></li><li><p>······</p></li></ol><hr><p>写得不多，毕竟还有一小时就要回狱了。以后可能会更新，大家一起坚持到明天，为英特纳雄耐尔而奋斗！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本博客第一篇文章&lt;del&gt;竟然是反云力文章&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;太好了，我也要没书读了。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KjpsH.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="灌水区" scheme="https://RPChe-6626.github.io/categories/%E7%81%8C%E6%B0%B4%E5%8C%BA/"/>
    
    
      <category term="反云力" scheme="https://RPChe-6626.github.io/tags/%E5%8F%8D%E4%BA%91%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P1823 【[COI2007] Patrik 音乐会的等待】</title>
    <link href="https://rpche-6626.github.io/2019/11/13/%E6%B4%9B%E8%B0%B7P1823%20%E3%80%90[COI2007]%20Patrik%20%E9%9F%B3%E4%B9%90%E4%BC%9A%E7%9A%84%E7%AD%89%E5%BE%85%E3%80%91/"/>
    <id>https://rpche-6626.github.io/2019/11/13/%E6%B4%9B%E8%B0%B7P1823%20%E3%80%90[COI2007]%20Patrik%20%E9%9F%B3%E4%B9%90%E4%BC%9A%E7%9A%84%E7%AD%89%E5%BE%85%E3%80%91/</id>
    <published>2019-11-12T16:00:00.000Z</published>
    <updated>2019-11-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了题解，发现大佬们大多用了单调栈+pair维护或单调栈+二分查找的方式，但是，此题可以用</p><h2 id="两个单调栈"><a href="#两个单调栈" class="headerlink" title="两个单调栈"></a>两个单调栈</h2><p>来求解。</p><p><img src="https://s2.ax1x.com/2020/02/22/3KLAiT.png" alt=""></p><a id="more"></a><hr><p>首先，读完题，我们发现此题要找一个人左右两边第一个比他大的数，那么自然想到单调栈。第一次我只维护了一个单调栈，结果样例都过不了。考虑到题目说的是的左右两边，我就又加了一个单调栈。</p><p>对于每一个单调栈，分别从数据的左右两边开始处理，对应计算的分别是每一个人可以看到他左边的几个人的和他可以看到他右边的几个人，期间维护其单调递增。因为每一个单位会被第一个比他高的那个人挡住视线，所以每当有一个人被从栈里弹出，他就会被当前这个人挡住视线，也就是看不到后面的人了。如果有人被从栈里弹出，就把答案累加1。</p><p>然而我们还是过不了样例。这是因为我们没有计算高度相同的情况。但是我们又不能弹出与当前这个人高度相同的人，因为他并不会被当前这个人遮挡，那怎么办呢？这时候，我们只需要累加答案就可以了，因为高度相同的不会相互遮挡，而需要累加的则是之前跟这个人高度相同的人的总数。这样就可以AC此题了。</p><p>因为元素不会重复入栈，所以时间复杂度为O(n)。</p><p>需要注意的是为了避免重复累加，累加操作只在一个栈中执行一次。</p><p>最后，抬上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;//个人喜欢STL</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,h[<span class="number">500005</span>],ans,c[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left_maxx</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(!s.empty()&amp;&amp;h[s.top()]&lt;h[i]) s.pop(),ans++;</span><br><span class="line"><span class="keyword">if</span>(!s.empty()&amp;&amp;h[s.top()]==h[i]) c[i]+=c[s.top()]+<span class="number">1</span>,ans+=c[i];<span class="comment">//为了避免回溯查找，浪费时间，可以直接记一下数，累加的时候把上一个人累加的数算上，再加1就行。</span></span><br><span class="line">s.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">right_maxx</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line"><span class="keyword">while</span>(!s.empty()&amp;&amp;h[s.top()]&lt;h[i]) s.pop(),ans++;</span><br><span class="line">s.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) h[i]=read();</span><br><span class="line">left_maxx();</span><br><span class="line">right_maxx();</span><br><span class="line">write(ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了题解，发现大佬们大多用了单调栈+pair维护或单调栈+二分查找的方式，但是，此题可以用&lt;/p&gt;
&lt;h2 id=&quot;两个单调栈&quot;&gt;&lt;a href=&quot;#两个单调栈&quot; class=&quot;headerlink&quot; title=&quot;两个单调栈&quot;&gt;&lt;/a&gt;两个单调栈&lt;/h2&gt;&lt;p&gt;来求解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KLAiT.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学术" scheme="https://RPChe-6626.github.io/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="题解" scheme="https://RPChe-6626.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P5603 【小C与桌游】</title>
    <link href="https://rpche-6626.github.io/2019/10/28/%E6%B4%9B%E8%B0%B7P5603%20%E3%80%90%E5%B0%8FC%E4%B8%8E%E6%A1%8C%E6%B8%B8%E3%80%91/"/>
    <id>https://rpche-6626.github.io/2019/10/28/%E6%B4%9B%E8%B0%B7P5603%20%E3%80%90%E5%B0%8FC%E4%B8%8E%E6%A1%8C%E6%B8%B8%E3%80%91/</id>
    <published>2019-10-27T16:00:00.000Z</published>
    <updated>2019-10-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先读完题，我们就可以知道此题一定与拓扑排序有关。要求的分别是“最优方式能得到”和“最优方式只失去”的答案。</p><p><img src="https://s2.ax1x.com/2020/02/22/3KXNVI.png" alt=""></p><a id="more"></a><p>对于“最优方式能得到”问题，只用每次选最小值就可以了，因为尽量要保证升序，用一个小根堆维护就行。</p><p>而对于“最优方式只失去”问题，每次如果有小于当前最大值的点，我们就去走，因为这样是不影响答案的。而如果没有，我们就去走当前最大的点。</p><p>但是怎么实现呢？大佬们好像都用了一个小根堆和一个大根堆<del>或是平衡树</del>来实现，但是其实只用一个堆就够了。</p><p>这个堆不同于一般的小根堆或大根堆。我们假设堆中有2个元素x和y，当前最大值是maxx1，则这个堆比较的规则是：如果x和y都小于maxx1，则返回较小值，否则返回较大值，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct node1&#123;</span><br><span class="line">int h;</span><br><span class="line">friend bool operator &lt; (node1 x,node1 y) &#123;</span><br><span class="line">if(x.h&gt;maxx1&amp;&amp;y.h&gt;maxx1) return x.h&lt;y.h;</span><br><span class="line">return x.h&gt;y.h;</span><br><span class="line">&#125; </span><br><span class="line">&#125;;&#x2F;&#x2F;具体比较规则可能与描述有所不同，这是因为STL默认的优先队列为大根堆，但结果是正确的。</span><br><span class="line">priority_queue&lt;node1&gt; q1;</span><br></pre></td></tr></table></figure><p>这样完整代码也会更短，更容易实现，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,in[<span class="number">10000000</span>],maxx,cnt,head[<span class="number">1000000</span>],ans,in1[<span class="number">1000000</span>],ans1,maxx1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,next;</span><br><span class="line">&#125;e[<span class="number">10000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node1</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node1 x,node1 y) &#123;</span><br><span class="line"><span class="keyword">if</span>(x.h&gt;maxx1&amp;&amp;y.h&gt;maxx1) <span class="keyword">return</span> x.h&lt;y.h;</span><br><span class="line"><span class="keyword">return</span> x.h&gt;y.h;</span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">priority_queue&lt;node1&gt; q1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">e[cnt].a=a;</span><br><span class="line">e[cnt].b=b;</span><br><span class="line">e[cnt].next=head[a];</span><br><span class="line">head[a]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">top_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line">u=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(maxx&lt;u) &#123;</span><br><span class="line">maxx=u;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next) &#123;</span><br><span class="line">in[e[i].b]--;</span><br><span class="line"><span class="keyword">if</span>(in[e[i].b]==<span class="number">0</span>) q.push(e[i].b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">top_sort1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q1.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line">u=q1.top().h;</span><br><span class="line">q1.pop();</span><br><span class="line"><span class="keyword">if</span>(maxx1&lt;u) &#123;</span><br><span class="line">maxx1=u;</span><br><span class="line">ans1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next) &#123;</span><br><span class="line">in1[e[i].b]--;</span><br><span class="line">node1 t;</span><br><span class="line">t.h=e[i].b;</span><br><span class="line"><span class="keyword">if</span>(in1[e[i].b]==<span class="number">0</span>) q1.push(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a=read(),b=read();</span><br><span class="line">add(a,b);</span><br><span class="line">in[b]++;</span><br><span class="line">in1[b]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(in[i]==<span class="number">0</span>) &#123;</span><br><span class="line">q.push(i);</span><br><span class="line">node1 t;</span><br><span class="line">t.h=i;</span><br><span class="line">q1.push(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">top_sort();</span><br><span class="line">top_sort1();</span><br><span class="line">write(ans),<span class="built_in">putchar</span>(<span class="string">'\n'</span>),write(ans1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>然而考场上窝还是只有46分。</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先读完题，我们就可以知道此题一定与拓扑排序有关。要求的分别是“最优方式能得到”和“最优方式只失去”的答案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KXNVI.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学术" scheme="https://RPChe-6626.github.io/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="题解" scheme="https://RPChe-6626.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>洛谷UVA515 【King】</title>
    <link href="https://rpche-6626.github.io/2019/08/04/%E6%B4%9B%E8%B0%B7UVA515%20%E3%80%90King%E3%80%91/"/>
    <id>https://rpche-6626.github.io/2019/08/04/%E6%B4%9B%E8%B0%B7UVA515%20%E3%80%90King%E3%80%91/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-08-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，这是一道差分约束题，如果要看差分约束的定义和一些基础知识可以去另一篇题解——<a href="https://www.luogu.org/blog/Darth-Che/solution-uva1723" target="_blank" rel="noopener">UVA1723 Intervals</a></p><p><img src="https://s2.ax1x.com/2020/02/22/3KXsMQ.png" alt=""></p><a id="more"></a><p>这道题几乎是一道差分约束的裸题，但是它只问有没有解，于是难度系数又降低了一点（不知道有没有其它神奇解法）。</p><p>唯一的麻烦之处就在于——如何保证图的联通。由于没有隐藏条件，这里要用一个叫超级源点的东西。所谓超级源点，其实就是用另一个点把图中所有点都连起来，边权为0（建从这个点到其它点的有向边）。这样就可以在不影响结果的前提下使整个图联通。</p><p>最后抬上代码——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sss</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,v,next;</span><br><span class="line">&#125;e[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">10000</span>],n,m,dis[<span class="number">10000</span>],cnt=<span class="number">1</span>,vis[<span class="number">10000</span>],vis1[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[cnt].a=a;</span><br><span class="line">e[cnt].b=b;</span><br><span class="line">e[cnt].v=v;</span><br><span class="line">e[cnt].next=head[a];</span><br><span class="line">head[a]=cnt;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> sta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(sta);</span><br><span class="line">vis[sta]=<span class="number">1</span>;</span><br><span class="line">dis[sta]=<span class="number">0</span>;</span><br><span class="line">vis1[sta]++;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">vis[temp]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[temp];i!=<span class="number">-1</span>;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[e[i].b]&lt;dis[temp]+e[i].v)</span><br><span class="line">&#123;</span><br><span class="line">dis[e[i].b]=dis[temp]+e[i].v;</span><br><span class="line"><span class="keyword">if</span>(vis[e[i].b]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis[e[i].b]=<span class="number">1</span>;</span><br><span class="line">q.push(e[i].b);</span><br><span class="line">vis1[e[i].b]++;</span><br><span class="line"><span class="keyword">if</span>(vis1[e[i].b]&gt;n+<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(dis,-inf,<span class="keyword">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(vis1,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis1));</span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">clear();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>;j++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s[j];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;z;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'g'</span>)</span><br><span class="line">add(x<span class="number">-1</span>,x+y,z+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> add(x+y,x<span class="number">-1</span>,<span class="number">1</span>-z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">add(n+<span class="number">1</span>,i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(spfa(n+<span class="number">1</span>)) <span class="built_in">cout</span>&lt;&lt;<span class="string">"lamentable kingdom"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"successful conspiracy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，这是一道差分约束题，如果要看差分约束的定义和一些基础知识可以去另一篇题解——&lt;a href=&quot;https://www.luogu.org/blog/Darth-Che/solution-uva1723&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UVA1723 Intervals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KXsMQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学术" scheme="https://RPChe-6626.github.io/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="题解" scheme="https://RPChe-6626.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>洛谷UVA1723 【Intervals】</title>
    <link href="https://rpche-6626.github.io/2019/08/04/%E6%B4%9B%E8%B0%B7UVA1723%20%E3%80%90Intervals%E3%80%91/"/>
    <id>https://rpche-6626.github.io/2019/08/04/%E6%B4%9B%E8%B0%B7UVA1723%20%E3%80%90Intervals%E3%80%91/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-08-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先看完题目，就可以发现这是一道<del>贪心</del>差分约束的裸题。</p><p><img src="https://s2.ax1x.com/2020/02/22/3KXhGT.png" alt=""></p><a id="more"></a><h3 id="那么，差分约束乃何许物也？"><a href="#那么，差分约束乃何许物也？" class="headerlink" title="那么，差分约束乃何许物也？"></a>那么，差分约束乃何许物也？</h3><p>差分约束系统是一种特殊的N元一次不等式组，它包含N个变量X1~XN以及M个约束条件，每个约束条件都是由两个变量作差构成的，形如Xi-Xj&lt;=Ck，Ck是常数，1〈=i，j&lt;=N,1&lt;=k&lt;=M。我们要解决的问题是：求一组解X1=a1，X2=a2…Xn=aN，使所有约束条件都得到满足。</p><p>差分约束系统的每个约束条件Xi-Xj&lt;=ck可以变形为Xi&lt;=Xj+ck。这与单源最短路算法中的三角形不等式dis[y]&lt;=dis[x]+z非常相似。因此，可以把每个变量Xi看作有向图中的一个节点i，对于每个约束条件Xi-Xj&lt;=ck,看作从节点j向节点i连一条长度为ck的有向边。（以上摘自信息学奥赛一本通.提高篇）这样就可以愉快的跑单源最短路算法了。</p><p>而对于形如Xi-Xj&gt;=Ck的约束条件（本题），看作从节点j向节点i连一条长度为ck的有向边，然后跑单源最短长路算法就可以了。这里有一个判断是跑最长路还是最短路的窍门，把Xi-Xj&lt;=ck变形为Xi&lt;=Xj+ck，可以理解为最后的结果中源点到Xi的距离要么短于源点到Xj的距离加Xi与Xj之间的距离，要么与其相等。这样的话，肯定跑的是最短路算法。反之就是最长路算法。</p><h2 id="但以上不是重点。"><a href="#但以上不是重点。" class="headerlink" title="但以上不是重点。"></a>但以上不是重点。</h2><p>整个差分约束系统中最烦人的，莫过于判别隐藏条件和保证图联通（容易忘）。由于每道题的隐藏条件不同，所以要有针对性的分析。对于本题，设s[i]表示0~i中选择了n个数，则隐藏条件有2个：</p><p>1.s[i]-s[i-1]&gt;=0。0~i中选出的数肯定不比0~i-1少。</p><p>2.s[i]-s[i-1]&lt;=1。每个数只能被选一次，可变形为s[i-1]-s[i]&gt;=-1。</p><p>本题由于添加隐藏条件后，图就必定联通，因此就不用考虑图是否联通的问题了。但是在做某些题时，题中的隐藏条件不足以保证图联通，或根本无隐藏条件，这时就要用另一个东西——超级源点。具体我写在另一篇题解上——<a href="https://www.luogu.org/blog/Darth-Che/solution-uva515" target="_blank" rel="noopener">UVA515 King</a></p><p>还有一个问题，差分约束系统不能使用dijkstra算法，因为dijkstra算法不能处理负权回路，只能用Bellman-Ford算法或spfa算法。</p><p>最后抬上代码——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sss</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,v,next;</span><br><span class="line">&#125;e[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">1000000</span>],n,dis[<span class="number">1000000</span>],cnt=<span class="number">1</span>,vis[<span class="number">1000000</span>],vis1[<span class="number">1000000</span>],minn=inf,maxx=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[cnt].a=a;</span><br><span class="line">e[cnt].b=b;</span><br><span class="line">e[cnt].v=v;</span><br><span class="line">e[cnt].next=head[a];</span><br><span class="line">head[a]=cnt;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> sta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(sta);</span><br><span class="line">vis[sta]=<span class="number">1</span>;</span><br><span class="line">dis[sta]=<span class="number">0</span>;</span><br><span class="line">vis1[sta]++;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">vis[temp]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[temp];i!=<span class="number">-1</span>;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[e[i].b]&lt;dis[temp]+e[i].v)</span><br><span class="line">&#123;</span><br><span class="line">dis[e[i].b]=dis[temp]+e[i].v;</span><br><span class="line"><span class="keyword">if</span>(vis[e[i].b]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis[e[i].b]=<span class="number">1</span>;</span><br><span class="line">q.push(e[i].b);</span><br><span class="line">vis1[e[i].b]++;</span><br><span class="line"><span class="keyword">if</span>(vis1[e[i].b]&gt;n)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[maxx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(dis,-inf,<span class="keyword">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(vis1,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis1));</span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line">minn=inf;</span><br><span class="line">maxx=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n1;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ii=<span class="number">1</span>;ii&lt;=n1;ii++)</span><br><span class="line">&#123;</span><br><span class="line">clear();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">add(max(<span class="number">0</span>,a<span class="number">-1</span>),b,c);</span><br><span class="line">minn=min(minn,max(<span class="number">0</span>,a<span class="number">-1</span>));</span><br><span class="line">maxx=max(maxx,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=minn;i&lt;maxx;i++)</span><br><span class="line">&#123;</span><br><span class="line">add(i,i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">add(i+<span class="number">1</span>,i,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ii==n1) <span class="built_in">cout</span>&lt;&lt;spfa(minn)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;spfa(minn)&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先看完题目，就可以发现这是一道&lt;del&gt;贪心&lt;/del&gt;差分约束的裸题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KXhGT.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学术" scheme="https://RPChe-6626.github.io/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="题解" scheme="https://RPChe-6626.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>关于保留字的一些尴尬之事</title>
    <link href="https://rpche-6626.github.io/2019/07/17/%E5%85%B3%E4%BA%8E%E4%BF%9D%E7%95%99%E5%AD%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%B4%E5%B0%AC%E4%B9%8B%E4%BA%8B/"/>
    <id>https://rpche-6626.github.io/2019/07/17/%E5%85%B3%E4%BA%8E%E4%BF%9D%E7%95%99%E5%AD%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%B4%E5%B0%AC%E4%B9%8B%E4%BA%8B/</id>
    <published>2019-07-16T16:00:00.000Z</published>
    <updated>2019-07-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>2019MZ夏令营刚结束，不出意料我炸在了最后一天的考试上。</p><p><img src="https://s2.ax1x.com/2020/02/22/3KL9Ln.png" alt=""></p><a id="more"></a><p>除了被假装成初三的高一大佬吊打，在这次的考试上还发生了一些尴尬之事——<br>最后一题因为保留字而编译错误（开了一个end变量）。</p><p>这是继2018冬令营考试爆炸后再一次因为保留字而编译错误（当时开了一个hash数组），坑逼的是dev-cpp竟然查不出来错。</p><p>当时硬是提交了7次，在第8次终于发现了问题所在并予以修正，但这次如果是NOIP就凉凉了。</p><p>所以就决定写一篇总结，顺便尽可能多的贴上C++中的保留字和关键字（免得下次又凉），再加上C++变量的命名规范。</p><hr><h2 id="c-中的保留字和关键字："><a href="#c-中的保留字和关键字：" class="headerlink" title="c++中的保留字和关键字："></a>c++中的保留字和关键字：</h2><p>基本的数据类型关键字：void, int, char, float, double, bool</p><p>类型修饰关键字：long, short, singed, unsigned </p><p>布尔型字面值：true, false</p><p>非常重要的变量声明修饰符：const, inline</p><p>存储类别关键字：auto, static, extern, , register</p><p>控制结构关键字：for, while, if, else, do</p><p>switch语句关键字：switch, case, default</p><p>路径跳转关键字：break, continue, return, goto</p><p>动态创建变量关键字：new, delete</p><p>长度运算符：sizeof</p><p>复合类型关键字：class, struct, enum, union, typedef</p><p>与类成员相关关键字：this, friend, virtual, mutable, explicit, operator </p><p>派生类继承方式：private, protected, public</p><p>模板：template, typename</p><p>命名空间：namespace, using</p><p>异常处理：catch, throw, try,</p><p>各种操作符的替代名：and, and_eq, bitand, bitor, compl, not, not_eq, or, or_eq, xor, xor_eq</p><p>其他：asm, export, typeid, volatile,end,hash,distance,advance,cos</p><p>在cena中time 是保留的 如果拿 time 做变量名 会 无法编译</p><p> ——以上部分内容摘自网络及Microsoft MSDN</p><p>——尽量不要用英文全拼 可以用缩写 或者把首字母大写 还有很多方法避免掉坑里的 比如：用汉语拼音</p><hr><h2 id="C-变量的命名规范"><a href="#C-变量的命名规范" class="headerlink" title="C++变量的命名规范"></a>C++变量的命名规范</h2><h4 id="1-不能是可能与C-中语句混淆的单词。"><a href="#1-不能是可能与C-中语句混淆的单词。" class="headerlink" title="1.不能是可能与C++中语句混淆的单词。"></a>1.不能是可能与C++中语句混淆的单词。</h4><p>（这种单词称为保留字，具体哪些是C++的保留字可以查阅书后的附录。凡是在输入代码时，自动变成蓝色的单词，一定是保留字。）如果我们创建一个名为int的变量，那么这个int到底是一个变量名还是另一个变量的数据类型呢？电脑糊涂了。</p><h4 id="2-第一个字符必须是字母或者是下划线。"><a href="#2-第一个字符必须是字母或者是下划线。" class="headerlink" title="2.第一个字符必须是字母或者是下划线。"></a>2.第一个字符必须是字母或者是下划线。</h4><h4 id="3-大小写不同的变量名表示两个不相同的变量。"><a href="#3-大小写不同的变量名表示两个不相同的变量。" class="headerlink" title="3.大小写不同的变量名表示两个不相同的变量。"></a>3.大小写不同的变量名表示两个不相同的变量。</h4><p>C++是大小写敏感的。所以如果把C++中的语句打成大写字母，就会造成错误。</p><h4 id="4-变量名中不应包括除字母、数字和下划线以外的字符。"><a href="#4-变量名中不应包括除字母、数字和下划线以外的字符。" class="headerlink" title="4.变量名中不应包括除字母、数字和下划线以外的字符。"></a>4.变量名中不应包括除字母、数字和下划线以外的字符。</h4><p>因为某些特殊字符在C++中具有分隔功能，电脑无法判断到底这是一个变量还是多个变量。</p><h4 id="5-变量名应该尽量符合变量里面存放东西的特征。"><a href="#5-变量名应该尽量符合变量里面存放东西的特征。" class="headerlink" title="5.变量名应该尽量符合变量里面存放东西的特征。"></a>5.变量名应该尽量符合变量里面存放东西的特征。</h4><p>这样，自己和别人在阅读代码的时候才能一目了然。我们介绍两种比较常用的变量名标记法：驼峰标记法和匈牙利标记法。驼峰标记法是以小写字母开头，下一个单词用大写字母开头，比如numOfStudent、typeOfBook等等，这些大写字母看起来像驼峰，因此得名。而匈牙利标记法是在变量名首添加一些字符来表示该变量的数据类型，比如iNumOfStudent是表示学生数的整型变量，fResult是表示结果的浮点型变量等等。不过，如果一个程序实在是非常简单，那么用诸如a，b，c作为变量名也未尝不可，只要你能够记住这些变量分别应该存放什么数据就行了。</p><hr><p><del>最后说一句，感觉妹子OJ实在好坑</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019MZ夏令营刚结束，不出意料我炸在了最后一天的考试上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/22/3KL9Ln.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://RPChe-6626.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="灌水区" scheme="https://RPChe-6626.github.io/tags/%E7%81%8C%E6%B0%B4%E5%8C%BA/"/>
    
  </entry>
  
</feed>
